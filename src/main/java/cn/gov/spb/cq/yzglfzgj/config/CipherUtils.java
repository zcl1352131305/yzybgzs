//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : ������
//  @ File Name : CipherUtils.java
//  @ Date : 2012-11-08
//  @ Author : 
//
//



package cn.gov.spb.cq.yzglfzgj.config;


import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.apache.log4j.Logger;

import sun.misc.BASE64Encoder;


public class CipherUtils {
	private static final transient Logger log = Logger.getLogger(CipherUtils.class);
	
	//加密key
	private static String ENC_KEY = "foobar";
	
    /**利用MD5进行加密
     * @param str  待加密的字符串
     * @return  加密后的字符串
     * @throws NoSuchAlgorithmException 
     * @throws NoSuchAlgorithmException  没有这种产生消息摘要的算法
     * @throws UnsupportedEncodingException 
     * @throws UnsupportedEncodingException  
     */
    public static String md5(String str) throws NoSuchAlgorithmException, UnsupportedEncodingException{
        //确定计算方法
        MessageDigest md5=MessageDigest.getInstance("MD5");
        //加密后的字符串
        return new BASE64Encoder().encode(md5.digest(str.getBytes("utf-8")));
    }
    public static String hmd5(String str) throws NoSuchAlgorithmException, UnsupportedEncodingException{
        //确定计算方法
        MessageDigest md5=MessageDigest.getInstance("MD5");
        //加密后的字符串
        return convertByteArrayToHexString(md5.digest(str.getBytes("utf-8")));
    }
    private static String convertByteArrayToHexString(byte[] arrayBytes) {
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < arrayBytes.length; i++) {
            stringBuffer.append(Integer.toString((arrayBytes[i] & 0xff) + 0x100, 16)
                    .substring(1));
        }
        return stringBuffer.toString();
    }
	/**
	 * @param args
	 * @throws NoSuchPaddingException 
	 * @throws BadPaddingException 
	 * @throws UnsupportedEncodingException 
	 * @throws NoSuchAlgorithmException 
	 * @throws IllegalBlockSizeException 
	 * @throws InvalidKeyException 
	 */
	public static void main(String[] args) throws InvalidKeyException, IllegalBlockSizeException, NoSuchAlgorithmException, UnsupportedEncodingException, BadPaddingException, NoSuchPaddingException {
		String testdata ="";
//		String encdata ="";
//		String decdata ="";
//
//		log.info(testdata);
//		
//		encdata = encrypt(testdata);
//		log.info(encdata);
//		
//		decdata = decrypt(encdata);
		String str2 = "appid=wx9c5e41e112dbe7b9&body=yysh-product&mch_id=1488489412&nonce_str=d4cb464e63b94dd3b363129d50467c3d&notify_url=http://yysh.962020.com/webOrder_payback.ac&out_trade_no=723ce9ec6a944b4394a597d4a1860608&product_id=1452efbb34974f658c30e9488da7250d&spbill_create_ip=180.153.154.144&total_fee=1&trade_type=NATIVE&key=abcdefghijklmnopqrstuvwxyz123456";
		System.out.println(hmd5(str2));
		
		log.info("Md5:"+ md5(testdata));

	}

	/**
	 * 加密
	 * @param text 被加密文本
	 * @return 已经加密的文本
	 * @throws IllegalBlockSizeException
	 * @throws InvalidKeyException
	 * @throws NoSuchAlgorithmException
	 * @throws UnsupportedEncodingException
	 * @throws BadPaddingException
	 * @throws NoSuchPaddingException
	 */
	public static String encrypt(String text)
			throws IllegalBlockSizeException,
			InvalidKeyException,
			NoSuchAlgorithmException,
			UnsupportedEncodingException,
			BadPaddingException,
			NoSuchPaddingException {
		// 指定加密key和加密方式
		SecretKeySpec sksSpec = new SecretKeySpec(ENC_KEY.getBytes(), "Blowfish");
		
		// 生成加密解密实例
		Cipher cipher = Cipher.getInstance("BLOWFISH/CBC/PKCS5Padding");
		
		cipher.init(Cipher.ENCRYPT_MODE, sksSpec);

		// 实施加密
		byte[] encrypted = cipher.doFinal(text.getBytes());

		// 初期化ベクトル取得
		byte[] iv = cipher.getIV();

		StringBuffer ivsb = new StringBuffer();
		for (int i = 0; i < iv.length; i++) {
			ivsb.append(Integer.toHexString((iv[i] >> 4) & 0x0f)); 
			ivsb.append(Integer.toHexString(iv[i] & 0x0f));
		}

		for (int i = 0; i < encrypted.length; i++) {
			ivsb.append(Integer.toHexString((encrypted[i] >> 4) & 0x0f));
			ivsb.append(Integer.toHexString(encrypted[i] & 0x0f));
		}

		return ivsb.toString();
	}

	/**
	 * 解密
	 * @param encrypted_in 被解密字符串
	 * @return 已经解密的字符串
	 * @throws IllegalBlockSizeException
	 * @throws InvalidKeyException
	 * @throws NoSuchAlgorithmException
	 * @throws UnsupportedEncodingException
	 * @throws BadPaddingException
	 * @throws NoSuchPaddingException
	 */
	public static String decrypt(String encrypted_in)
			throws IllegalBlockSizeException,
			InvalidKeyException,
			NoSuchAlgorithmException,
			UnsupportedEncodingException,
			BadPaddingException,
			NoSuchPaddingException {
		if(encrypted_in==null||encrypted_in.length()<16){
			return null;
		}
		String encrypted_iv = encrypted_in.substring(0, 16);
		String encrypted = encrypted_in.substring(16);

		ByteArrayOutputStream baosiv = new ByteArrayOutputStream();
		for (int i = 0; i < encrypted_iv.length(); i += 2) {
			int biv = Integer.parseInt(encrypted_iv.substring(i, i + 2), 16);
			baosiv.write(biv);
		}

		IvParameterSpec dps = new IvParameterSpec(baosiv.toByteArray());

		// 指定加密key和加密方式
		SecretKeySpec sksSpec = new SecretKeySpec(ENC_KEY.getBytes(), "Blowfish");
		
		// 生成加密解密实例
		Cipher cipher = Cipher.getInstance("BLOWFISH/CBC/PKCS5Padding");
		
		try {
			cipher.init(Cipher.DECRYPT_MODE, sksSpec, dps);
		} catch (InvalidAlgorithmParameterException e) {
			// TODO 自動生成された catch ブロック
			log.error(e);
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		for (int i = 0; i < encrypted.length(); i += 2) {
			int b = Integer.parseInt(encrypted.substring(i, i + 2), 16);
			baos.write(b);
		}

		byte[] decrypted = cipher.doFinal(baos.toByteArray());
		try {
			baosiv.close();
		} catch (IOException e) {
		}
		try {
			baos.close();
		} catch (IOException e) {
		}
		return new String(decrypted);
	}
}

